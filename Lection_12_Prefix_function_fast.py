# ==================================================
#
#   Lection 12.
#   Поиск подстроки в строке.
#   Поиск значений префикс-функции для строки.
#
#   asymptotics: O(N)
#
# ==================================================

""" Алгоритм осуществляет поиск последовательности символов (подстроки)
в заданной строке. На выходе показывает список чисел, которые являются индексами
элементов, предшествующими первым элементам последовательностей, совпадающих с искомой. Нумерация начинается с нуля. Для поиска используется префикс функция
строки, состоящей из искомой последовательности, символа-разделителя и исходной
строки.
Поиск префикс-функции: это динамический поиск максимальных длин префиксов, которые равны суффиксам, в каждом последующем срезе строки,
и присваивание значений этих длин элементам списка (изначально нулевым),
индексы позиций которых соответствуют позициям символов исходной строки,
путем увеличения длины уже найденного префикса (и суффикса) на 1,
если символы, следующие за префиксом и суффиксом предыдущего среза строки равны,
либо путем циклического поиска префикса в уже найденных префиксах префиксов, в случае если символы, следующие за префиксом и суффиксом предыдущего среза строки НЕ равны, до тех пор, пока либо не закончатся префиксы, либо не найдутся равные символы, следующие за префиксами. """

def searchPrefix(S):
    """ Второстепенная часть. Подготовка списка длин префиксов с длиной списка, равной длине исходной строки
    и нулевыми значениями элементов.  """
    pi = [0] * len(S)

    """ Второстепенная часть. Запуск цикла, пробегающего индексы символов исходной строки, начиная со второго символа, поскольку у первого, т.е. единичного, символа ни префикса, ни суффикса не существует. """
    for i in range(1, len(S)):

        """ Основная часть (часть 1). Установка подсреза, равного длине префикса
        среза с длиной (i-1) исходной строки. """
        p = pi[i-1]


        """ Основная часть (часть 2). Циклическое переназначение такой границы нового подсреза
        рассматриваемого среза строки, которая соответствует длине префикса, после которого
        следующий символ будет равен последнему символу рассматриваемого среза i, пока не
        найдутся равные символы, либо пока длина рассматриваемых подсрезов не уменьшится до нуля. """
        while S[i] != S[p] and p > 0:
            p = pi[p-1]


        """ Основная часть (часть 3). Проверка на равенство последнего символа среза i и
        символа, следующего после подсреза, который определен в начале итерации цикла for, и
        увеличение длины этого подсреза на единицу в случае равенства рассматриваемых символов.  """
        if S[i] == S[p]:
            p += 1

        """ Второстепенная часть. Присвоение элементу списка префиксов, стоящему в позиции i, значения,
        равного длине подсреза текущего среза i. """
        pi[i] = p

    return pi

""" Второстепенная часть. Формирует объединенную строку, запускает поиск префикс-функции для объединенной строки и сравнивает значения элементов полученного массива префикс-функции с длиной искомой последовательности, возвращая список индексов элементов исходной строки, предшествующих каждому вхождению искомой последовательности. """
def searchInString(sub:str, S:str):
    """ Второстепенная часть. Подготавливает пустой массив индексов вхождений, символ-разделитель и объединенную строку, состоящую из искомой последовательности, символа-разделителя и исходной строки. """
    income = []
    div = '#'
    stringConcat = sub + div + S

    """ Основная часть (во всей этой второстепенной части) - запускат поиск префикс-функции для объединенной строки. """
    prefixList = searchPrefix(stringConcat)

    """ Второстепенная часть. В цикле пробегаются все индексы элементов найденной префикс-функции и каждый элемент списка сравнивается с длиной искомой последовательности и, при этом, формируется выходной список вхождений, в том случае, если сравниваемые длины равны.  """
    for i in range(0, len(prefixList)):
        if len(sub) == prefixList[i]:
            income.append(i - len(sub) * 2 - len(div) + 1)

    return income

sub1 = "jjjj"
string1 = "nnnjjjjnnnjjjjj"

print(searchInString(sub1, string1))
