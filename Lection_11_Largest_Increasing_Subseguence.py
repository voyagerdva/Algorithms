# -*- coding: utf-8 -*-

# ==================================================
#
#   Lection 11.
#   поиск наибольшей возрастающей подпоследовательности в списке.
#
#   asymptotics: O(N*M)
#
# ==================================================
""" 
поиск возрастающих подпоследовательностей в каждой части (от 0 до i) исходной числовой последовательности,
фиксирование длин этих подпоследовательностей в списке с последующим возвратом максимального элемента этого списка (выбор наибольшей длины)
"""
def lenLis(A):
    """ 
    второстепенная часть. Подготовительная.
    """
    subSeqLens = [0] * len(A)
    for i in range(len(A)):
        """ 
        основная часть. Пробегает каждую часть списка, длины которых отличаются друг от друга на единицу,
        и в каждый элемент другого списка складывает количество тех элементов из каждой части исходного списка, которые удовлетворяют определенному критерию 
        """
        for j in range(i):
            if A[j] < A[i] and subSeqLens[j] > subSeqLens[i]:
                subSeqLens[i] = subSeqLens[j]
        subSeqLens[i] += 1
    """ 
    второстепенная часть. Вывод результатов.
    """
    lis = findLis(subSeqLens, A)
    return max(subSeqLens), lis

""" 
восстановление НВП путем прохода списка длин от максимальной длины к минимальной, выяснения индекса элемента,
соответствующего текущей длине подпоследовательности и присвоение значения элемента с таким же индексом в исходной последовательности
элементам списка НВП - от конца к началу.
"""
def findLis(L, A):
    """ 
    второстепенная часть. Подготовительная.
    """
    lis = [0] * max(L)
    index = -1
    localMax = L.index(max(L)) + 1

    """ 
    основная часть. Сканирует результирующий список длин, последовательно находит индексы элементов (максимальных в каждом проходе),
    определяет соответствующий элемент в исходном списке и складывает его в новый список от конца к началу.
    """
    for i in range(0, max(L)):
        for j in range(localMax + 1):
            if L[j] == max(L) - i:
                index = j
        lis[max(L) - i - 1] = A[index]
        localMax = index
    """ 
    второстепенная часть. Возврат результатов.
    """
    return lis

A = [3, 9, 1, 2, 4, 7, 5, 4, 8, 9, 5, 6, 5]

print(*lenLis(A), sep='\n')