# ==================================================
#
#    Lection 22.
#    Graph dict
#
# ==================================================

""" 
Алгоритм принимает с клавиатуры число вершин графа, имена каждой вершины, создает пустой словарь и затем заносит в словарь пары "имя: множество с элементами, соответствующими соседним вершинам, т.е. с именами, введенными в одной итерации ввода".  """

""" Второстепенная часть. Подготовка исходных данных """
M, N = [int(x) for x in input().split()]
G = {}

""" Второстепенная часть. Запуск цикла по количеству вершин графа """
for i in range(N):

    """ Второстепенная часть. Ввод с клавиатуры имен вершин в формате строки через пробел с последующим разделением введенной строки по признаку пробела и присваивание полученных двух имен элементам кортежа """
    v1, v2 = input().split()

    """ Основная часть. Проходит по каждому из двух элементов полученного кортежа имен вершин и проверяет - есть ли такое имя в словаре имен и, если нет, то добавляет в словарь имен пару "имя: множество с именами соседних вершин", т.е. тех вершин, которые вводились на предыдущих итерациях цикла в одной итерации ввода, а если есть - то добавляет в существующее множество с именами соседних вершин текущее имя - т.е. у уже существующей вершины (ключ словаря) добавилась соседняя вершина (еще один элемент множества - значения ключа). """
    for v, u in (v1, v2), (v2, v1):
        if v not in G:
            G[v] = {u}
        else:
            G[v].add(u)

""" Второстепенная часть. Распечатывает полученную матрицу ребер. """
print(G)
