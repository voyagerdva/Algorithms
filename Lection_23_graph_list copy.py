# ==================================================
#
#    Lection 22.
#    Graph list
#
# ==================================================

""" 
Алгоритм принимает с клавиатуры число вершин графа, имена каждой вершины, создает список списков (матрицу), создает словарь имен и индексов, соответствующих каждой вершине, устанавливает поля матрицы с индексами, соответствующими индексам в словаре в единицу, если между этими вершинами есть ребро - т.е. если они были введены в одном цикле ввода.  """

""" Второстепенная часть. Подготовка исходных данных """
M, N = [int(x) for x in input().split()]
V = []
index = {}

""" Второстепенная часть. Подготовка списка списков ребер (матрицы) """
A = [[0]*N for i in range(N)]

""" Второстепенная часть. Запуск цикла по количеству вершин графа """
for i in range(N):
    """ Второстепенная часть. Ввод с клавиатуры имен вершин в формате строки через пробел с последующим разделением введенной строки по признаку пробела и присваивание полученных двух имен элементам кортежа """
    v1, v2 = input().split()

    """ Основная часть - 1. Проходит по каждому из двух элементов полученного кортежа имен и проверяет - есть ли такое имя в словаре имен и индексов и, если нет, то добавляет имя в список вершин и пару имя-индекс - в словарь, а если есть - то пропускает итерацию и переходит к следующему витку цикла. """
    for v in v1, v2:
        if v not in index:
            V.append(v)
            index[v] = len(V)-1

    """ Основная часть - 2. Устанавливает элементы матрицы с индексами из словаря, соответствующими парным вершинам (т.е. вершинам, введенным в одной итерации цикла ввода) в единицу, обозначая тем самым факт наличия ребра. """

    A[index[v1]][index[v2]] = 1
    A[index[v2]][index[v1]] = 1

""" Второстепенная часть. Распечатывает полученную матрицу ребер. """
for item in A:
    print(item)